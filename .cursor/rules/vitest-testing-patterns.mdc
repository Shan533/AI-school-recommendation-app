# Testing Patterns for Next.js 15 + Supabase (Vitest)

## 🎯 **SOLUTION**: Unified Vitest Testing Strategy ✅

**Status**: Successfully migrated from Jest to Vitest for all testing needs
**Result**: Single testing environment with better Next.js 15 support

## 🛠️ Tool Selection Guide

### ✅ **Vitest For Everything** (Current Implementation)
- ✅ Pure utility functions (`validation.ts`, `utils.ts`)
- ✅ Server Components (`helpers.ts`, `auth-actions.ts`)
- ✅ API route testing (all admin and public APIs)
- ✅ Next.js 15 modern features
- ✅ ESM modules with complex dependencies
- ✅ Schema validation and database migrations
- ✅ React components and authentication flows


## 📋 Testing Patterns

### Vitest Pattern (All Functions)
```typescript
// Example: validation.test.ts
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { validateRange } from '@/lib/validation'

describe('validateRange', () => {
  it('should return null for valid values', () => {
    expect(validateRange(5, 1, 10, 'Test')).toBeNull()
  })
})
```

### Vitest Pattern (Server Components)
```typescript
// Example: helpers.vitest.ts
import { vi, describe, it, expect, beforeEach } from 'vitest'

// Mock modules with Vitest
vi.mock('@/lib/supabase/server', () => ({
  createClient: vi.fn()
}))

vi.mock('next/headers', () => ({
  cookies: vi.fn()
}))

// Import mocked modules
import { createClient } from '@/lib/supabase/server'
import { cookies } from 'next/headers'

// Create typed mocks
const mockCreateClient = vi.mocked(createClient)
const mockCookies = vi.mocked(cookies)

// Test implementation
describe('Server Component Function', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })
  
  it('should work with proper mocking', async () => {
    // Test logic here
  })
})
```

### Vitest Pattern (API Routes)
```typescript
// Example: schools.vitest.ts
import { vi, describe, it, expect, beforeEach } from 'vitest'
import { NextRequest } from 'next/server'

// Mock dependencies
vi.mock('@/lib/supabase/helpers', () => ({
  getCurrentUser: vi.fn(),
  isAdmin: vi.fn(),
  getSupabaseClient: vi.fn()
}))

// Import API handlers
import { POST } from '@/app/api/admin/schools/route'
import { GET, PUT, DELETE } from '@/app/api/admin/schools/[id]/route'

// Create complete mock objects with all required methods
const mockSupabaseClient = {
  from: vi.fn(() => ({
    insert: vi.fn(() => ({ select: vi.fn(() => ({ single: vi.fn() })) })),
    select: vi.fn(() => ({ eq: vi.fn() })),
    update: vi.fn(() => ({ eq: vi.fn(() => ({ select: vi.fn() })) })),
    delete: vi.fn(() => ({ eq: vi.fn() }))
  }))
}

describe('API Routes', () => {
  it('should handle requests properly', async () => {
    const request = new NextRequest('http://localhost:3000/api/admin/schools', {
      method: 'POST',
      body: JSON.stringify({ name: 'Test School' })
    })
    const response = await POST(request)
    expect(response.status).toBe(201)
  })
})
```

### Vitest Pattern (React Components)
```typescript
// Example: profile-actions.test.tsx
import { vi, describe, it, expect, beforeEach } from 'vitest'
import { render, screen, fireEvent } from '@testing-library/react'
import { ProfileActions } from '@/components/profile/profile-actions'

// Mock dependencies
vi.mock('next/navigation', () => ({
  useRouter: () => ({
    push: vi.fn()
  })
}))

describe('ProfileActions', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })
  
  it('should render change email and reset password buttons', () => {
    render(<ProfileActions userEmail="test@example.com" />)
    
    expect(screen.getByText('Change Email')).toBeInTheDocument()
    expect(screen.getByText('Reset Password')).toBeInTheDocument()
  })
})
```

## 🔧 Configuration Setup

### Vitest Configuration (vitest.config.ts) ✅
```typescript
export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: ['./test/setup.ts'],
    include: ['__tests__/**/*.{test,spec,vitest}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})
```

### Test Setup (test/setup.ts) ✅
```typescript
import { beforeAll, afterEach, afterAll } from 'vitest'
import { cleanup } from '@testing-library/react'
import '@testing-library/jest-dom'

beforeAll(() => {
  // Setup any global test configurations
})

afterEach(() => {
  cleanup()
})

afterAll(() => {
  // Cleanup global resources
})
```

## 🚀 Usage Commands

### Vitest (All Testing)
```bash
npm test                    # Run all Vitest tests
npm run test:watch         # Vitest watch mode
npm run test:coverage      # Vitest coverage
npm run test:ui            # Interactive UI
```

### Test Specific Files
```bash
# Run specific test suites
npm test __tests__/lib/auth-actions-password-reset.test.ts
npm test __tests__/components/profile/profile-actions.test.tsx
npm test __tests__/components/auth/forgot-password-form.test.tsx

# Run with coverage for specific files
npm run test:coverage __tests__/lib/auth-actions-password-reset.test.ts
```

### File Naming Convention
- **All Tests**: `*.test.ts` or `*.test.tsx` (Vitest)
- **Legacy**: `*.vitest.ts` (being standardized to `.test.ts`)


## 🔑 Key Learnings

### Next.js Server Actions Testing
- Use `vi.mock('next/navigation')` to mock `redirect()`
- Handle redirect errors: `redirect()` throws `NEXT_REDIRECT` error
- Test returned `AuthResult` objects, not thrown exceptions
- Mock `FormData` inputs for server actions

### API Route Testing Best Practices
- Mock all Supabase client methods (insert, select, update, delete)
- Test authentication/authorization for every endpoint
- Verify HTTP status codes and response bodies
- Test error handling and edge cases
- Use `NextRequest` for realistic request simulation

### Vitest Mocking Strategy
```typescript
// Standard Vitest mocking pattern
vi.mock('@/lib/supabase/server', () => ({
  createClient: vi.fn()
}))

vi.mock('next/headers', () => ({
  cookies: vi.fn(),
  headers: vi.fn()
}))

// Import after mocking
import { createClient } from '@/lib/supabase/server'
const mockCreateClient = vi.mocked(createClient)
```

### React Component Testing
```typescript
// Mock navigation and external dependencies
vi.mock('next/navigation', () => ({
  useRouter: () => ({
    push: vi.fn()
  })
}))

// Test user interactions
fireEvent.click(screen.getByText('Change Email'))
expect(mockScrollIntoView).toHaveBeenCalled()
```

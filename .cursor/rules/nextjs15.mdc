---
description: 
globs: 
alwaysApply: true
---

You are an expert senior software engineer working on the AI School Recommend App, specializing in modern web development with deep expertise in TypeScript, React 19.1.0, Next.js 15.4.6 (App Router), Supabase 2.55.0, Shadcn UI, Radix UI, and Tailwind CSS 4.x. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.

## Current Technology Stack

### Core Framework
- **Next.js**: 15.4.6 with App Router and Server Components
- **React**: 19.1.0 with concurrent features
- **TypeScript**: 5.x for type safety

### Backend & Database
- **Supabase**: 2.55.0 (PostgreSQL, Auth, RLS)
- **Authentication**: Supabase Auth with middleware session management

### UI & Styling
- **Tailwind CSS**: 4.x with PostCSS
- **shadcn/ui**: Latest components with Radix UI primitives
- **Lucide React**: 0.537.0 for icons

### Form Handling & Validation
- **React Hook Form**: 7.62.0 for form management
- **Zod**: 4.0.15 for schema validation
- **@hookform/resolvers**: 5.2.1 for form validation integration

### Testing & Development
- **Jest**: 30.0.5 with React Testing Library
- **ESLint**: 9.x with Next.js configuration
- **Docker**: Containerization for development

### Deployment & Monitoring
- **Vercel**: Hosting platform with CI/CD
- **Vercel Analytics**: 1.5.0 for performance monitoring

### Data Processing
- **PapaParse**: 5.5.3 for CSV processing

## Project Documentation Reference

Always refer to these documentation files when making changes:

### Core Documentation
- **docs/design-doc.mdc** - Complete application design, features, data schema, and architecture
- **docs/implementation-plan.mdc** - Development roadmap, frontend strategy, and testing plan
- **docs/file-structure.mdc** - Current project file organization and structure
- **docs/schema-design.mdc** - Database schema design and relationships

### Setup & Testing
- **docs/setup-instructions.md** - Quick setup guide for environment variables and database
- **docs/testing-guide.md** - Comprehensive testing checklist and troubleshooting

### Database
- **supabase/migrations/0000_init.sql** - Complete database schema with RLS policies

### Key Features Implemented (Phase 1)
- User authentication with Supabase Auth and middleware
- Admin dashboard with CRUD operations for schools and programs
- CSV bulk upload functionality with PapaParse
- Public browsing pages for schools and programs
- Mobile-first responsive design with Tailwind CSS 4.x
- Comprehensive testing with Jest and React Testing Library
- Docker containerization for development
- Vercel deployment with analytics

When making changes:
1. Check relevant documentation first
2. Ensure consistency with existing design patterns
3. Update documentation if architectural changes are made
4. Follow the established file structure

## Analysis Process

Before responding to any request, follow these steps:

1. Request Analysis
   - Determine task type (code creation, debugging, architecture, etc.)
   - Identify languages and frameworks involved
   - Note explicit and implicit requirements
   - Define core problem and desired outcome
   - Consider project context and constraints

2. Solution Planning
   - Break down the solution into logical steps
   - Consider modularity and reusability
   - Identify necessary files and dependencies
   - Evaluate alternative approaches
   - Plan for testing and validation

3. Implementation Strategy
   - Choose appropriate design patterns
   - Consider performance implications
   - Plan for error handling and edge cases
   - Ensure accessibility compliance
   - Verify best practices alignment

## Code Style and Structure

### General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

### Async Request APIs

```typescript
// Always use async versions of runtime APIs
const cookieStore = await cookies()
const headersList = await headers()
const { isEnabled } = await draftMode()

// Handle async params in layouts/pages
const params = await props.params
const searchParams = await props.searchParams
```

## Project-Specific Patterns

### Supabase Integration
- Use `src/lib/supabase/helpers.ts` for common database operations
- Server components use `createClient(cookieStore)` from `src/lib/supabase/server.ts`
- Client components use `createClient()` from `src/lib/supabase/client.ts`
- Admin operations use `createAdminClient()` for privileged access
- Always check user authentication and admin status for protected routes
- Follow RLS policies defined in migration scripts

### Authentication & Authorization
```typescript
// Check if user is admin (for admin routes)
const user = await getCurrentUser()
if (!user || !(await isAdmin(user.id))) {
  redirect('/login')
}

// Middleware handles session management and route protection
// Use Server Actions for authentication operations
// Session cookies are managed automatically by middleware
```

### File Structure Conventions
- Admin routes: `src/app/admin/[feature]/page.tsx`
- Public routes: `src/app/[resource]/page.tsx` and `src/app/[resource]/[id]/page.tsx`
- API routes: `src/app/api/admin/[resource]/route.ts` and `src/app/api/admin/[resource]/[id]/route.ts`
- Auth routes: `src/app/auth/[feature]/page.tsx` and `src/app/auth/[feature]/route.ts`
- Components: Use shadcn/ui components from `src/components/ui/`
- Admin components: `src/components/admin/[feature].tsx`
- Form validation: Use Zod schemas in `src/lib/validation.ts`

### Database Operations
- Follow RLS policies defined in migration scripts
- Use proper error handling for Supabase operations
- Include proper TypeScript types for database queries
- Use UUIDs for primary keys and foreign keys
- Implement proper timestamps with `created_at` fields
- Use database transactions for complex operations

### Mobile-First Design
- Always implement responsive design with Tailwind CSS
- Use mobile-first breakpoints: `md:`, `lg:`, `xl:`
- Test layouts on multiple screen sizes

### Error Handling
- Use Next.js `notFound()` for invalid IDs in dynamic routes
- Implement proper try-catch blocks for async operations
- Provide user-friendly error messages
- Use error boundaries for React components
- Handle Supabase errors gracefully with proper fallbacks

## Development Infrastructure

### Testing Strategy
- Use Jest 30.0.5 with React Testing Library for unit and integration tests
- Test Server Components with proper mocking of Supabase clients
- Test Client Components with user interaction simulations
- Use schema validation tests for database migrations
- Implement E2E tests for critical user flows (future with Playwright)

### Docker Development
- Use Docker Compose for local development environment
- Separate containers for web app and future crawler service
- Hot reloading enabled for development efficiency
- Consistent environment across team members

### Code Quality Tools
- ESLint with Next.js configuration for code linting
- TypeScript 5.x for static type checking
- Prettier integration via Tailwind CSS
- Git hooks for pre-commit validation (future)

## Performance & Monitoring

### Optimization Strategies
- Leverage Server Components for reduced client-side JavaScript
- Use Next.js Image component for automatic image optimization
- Implement proper caching strategies for database queries
- Monitor Core Web Vitals with Vercel Analytics

### Security Best Practices
- Implement Row-Level Security (RLS) at database level
- Use HTTP-only cookies for session management
- Validate all inputs with Zod schemas
- Follow OWASP security guidelines
- Regular security audits and dependency updates


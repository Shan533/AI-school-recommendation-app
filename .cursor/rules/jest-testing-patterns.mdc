---
description: jest testing
alwaysApply: false
---
# Jest Testing Patterns for Next.js 15 + Supabase

## üö® Known Issues & Solutions

### Module Resolution Problems
**Problem**: Jest cannot resolve `@/lib/supabase/server` and other Next.js Server Component modules
```
Cannot find module '@/lib/supabase/server' from '__tests__/...'
```

**Root Cause**: Next.js 15 Server Components + Jest compatibility issues with module resolution

**Solutions**:
1. **Focus on Pure Functions First** - Test utility functions without external dependencies
2. **Use Manual Mocks** - Create `__mocks__` directory for problematic modules
3. **Skip Complex Mocks** - Use `.skip.ts` extension for files with unresolved dependencies

### Successful Testing Patterns

#### ‚úÖ **Pure Functions (WORKS PERFECTLY)**
```typescript
// Example: validation.test.ts
import { validateRange } from '@/lib/validation'

describe('validateRange', () => {
  it('should return null for valid values', () => {
    expect(validateRange(5, 1, 10, 'Test')).toBeNull()
  })
})
```

#### ‚ùå **Server Components (PROBLEMATIC)**
```typescript
// AVOID: Direct import of server components
import { getCurrentUser } from '@/lib/supabase/helpers'
jest.mock('@/lib/supabase/server') // This fails
```

## üéØ Testing Priority Strategy

### Phase 1: Pure Functions (HIGH Success Rate)
- `src/lib/validation.ts` ‚úÖ **100% coverage achieved**
- `src/lib/utils.ts` ‚úÖ **Already covered**
- Focus on business logic without external dependencies

### Phase 2: Client-Side Logic (MEDIUM Success Rate)
- Components that use `'use client'`
- Browser-only utilities
- Form validation logic

### Phase 3: Server Components (LOW Success Rate - SKIP FOR NOW)
- Authentication helpers
- Database operations
- API route handlers
- Next.js Server Actions

## üõ†Ô∏è Jest Configuration Best Practices

### Coverage Focus
```javascript
collectCoverageFrom: [
  'src/lib/**/*.{js,jsx,ts,tsx}',     // Utility functions
  'src/app/api/**/*.{js,jsx,ts,tsx}', // API routes
  '!src/components/**/*',             // Skip frontend components
  '!src/app/**/page.tsx',            // Skip Next.js pages
]
```

### Skip Problematic Files
```javascript
testPathIgnorePatterns: [
  '<rootDir>/__tests__/.*\\.skip\\.'  // Skip .skip.* files
]
```

## üìã Quick Testing Checklist

### Before Writing Tests
1. **Check if function is pure** (no external dependencies)
2. **Identify external dependencies** (Supabase, Next.js APIs)
3. **Choose appropriate testing strategy** based on complexity

### For Pure Functions ‚úÖ
1. Import directly
2. Write test cases for all branches
3. Test edge cases and boundary values
4. Expect 100% coverage

### For Functions with Dependencies ‚ö†Ô∏è
1. Try simple mocking first
2. If Jest resolution fails, use `.skip.ts` extension
3. Document the issue for future resolution
4. Focus on testable parts of the codebase

## üöÄ Immediate Actions

### When Adding New Tests
1. **Start with pure functions** - guaranteed success
2. **Use existing working patterns** - copy from `validation.test.ts`
3. **Avoid complex mocking** until Next.js + Jest compatibility improves
4. **Document blockers** - use `.skip.ts` and comments

### Current Status
- ‚úÖ **validation.test.ts** - 26 tests, 100% coverage
- ‚è∏Ô∏è **helpers.test.ts** - Skipped due to module resolution
- ‚è∏Ô∏è **auth-actions.test.ts** - Skipped due to Server Actions
- ‚è∏Ô∏è **API route tests** - Skipped due to Next.js integration

## üí° Pro Tips

### Maximize Coverage with Minimal Effort
1. **Target pure utility functions first**
2. **Write comprehensive test cases** (boundary values, error cases)
3. **Use descriptive test names** for better debugging
4. **Group related tests** in describe blocks

### Mock Strategy (When It Works)
```typescript
// Simple, working pattern
const mockFunction = jest.fn()
jest.mock('module-name', () => ({
  functionName: mockFunction
}))
```

### When to Skip
- Module resolution errors
- Complex Next.js integrations
- Server Component dependencies
- Authentication flows requiring real auth state

---

**Last Updated**: Testing structure setup phase
**Next Review**: After Next.js + Jest compatibility improves
# Jest Testing Patterns for Next.js 15 + Supabase

## üö® Known Issues & Solutions

### Module Resolution Problems
**Problem**: Jest cannot resolve `@/lib/supabase/server` and other Next.js Server Component modules
```
Cannot find module '@/lib/supabase/server' from '__tests__/...'
```

**Root Cause**: Next.js 15 Server Components + Jest compatibility issues with module resolution

**Solutions**:
1. **Focus on Pure Functions First** - Test utility functions without external dependencies
2. **Use Manual Mocks** - Create `__mocks__` directory for problematic modules
3. **Skip Complex Mocks** - Use `.skip.ts` extension for files with unresolved dependencies

### Successful Testing Patterns

#### ‚úÖ **Pure Functions (WORKS PERFECTLY)**
```typescript
// Example: validation.test.ts
import { validateRange } from '@/lib/validation'

describe('validateRange', () => {
  it('should return null for valid values', () => {
    expect(validateRange(5, 1, 10, 'Test')).toBeNull()
  })
})
```

#### ‚ùå **Server Components (PROBLEMATIC)**
```typescript
// AVOID: Direct import of server components
import { getCurrentUser } from '@/lib/supabase/helpers'
jest.mock('@/lib/supabase/server') // This fails
```

## üéØ Testing Priority Strategy

### Phase 1: Pure Functions (HIGH Success Rate)
- `src/lib/validation.ts` ‚úÖ **100% coverage achieved**
- `src/lib/utils.ts` ‚úÖ **Already covered**
- Focus on business logic without external dependencies

### Phase 2: Client-Side Logic (MEDIUM Success Rate)
- Components that use `'use client'`
- Browser-only utilities
- Form validation logic

### Phase 3: Server Components (LOW Success Rate - SKIP FOR NOW)
- Authentication helpers
- Database operations
- API route handlers
- Next.js Server Actions

## üõ†Ô∏è Jest Configuration Best Practices

### Coverage Focus
```javascript
collectCoverageFrom: [
  'src/lib/**/*.{js,jsx,ts,tsx}',     // Utility functions
  'src/app/api/**/*.{js,jsx,ts,tsx}', // API routes
  '!src/components/**/*',             // Skip frontend components
  '!src/app/**/page.tsx',            // Skip Next.js pages
]
```

### Skip Problematic Files
```javascript
testPathIgnorePatterns: [
  '<rootDir>/__tests__/.*\\.skip\\.'  // Skip .skip.* files
]
```

## üìã Quick Testing Checklist

### Before Writing Tests
1. **Check if function is pure** (no external dependencies)
2. **Identify external dependencies** (Supabase, Next.js APIs)
3. **Choose appropriate testing strategy** based on complexity

### For Pure Functions ‚úÖ
1. Import directly
2. Write test cases for all branches
3. Test edge cases and boundary values
4. Expect 100% coverage

### For Functions with Dependencies ‚ö†Ô∏è
1. Try simple mocking first
2. If Jest resolution fails, use `.skip.ts` extension
3. Document the issue for future resolution
4. Focus on testable parts of the codebase

## üöÄ Immediate Actions

### When Adding New Tests
1. **Start with pure functions** - guaranteed success
2. **Use existing working patterns** - copy from `validation.test.ts`
3. **Avoid complex mocking** until Next.js + Jest compatibility improves
4. **Document blockers** - use `.skip.ts` and comments

### Current Status
- ‚úÖ **validation.test.ts** - 26 tests, 100% coverage
- ‚è∏Ô∏è **helpers.test.ts** - Skipped due to module resolution
- ‚è∏Ô∏è **auth-actions.test.ts** - Skipped due to Server Actions
- ‚è∏Ô∏è **API route tests** - Skipped due to Next.js integration

## üí° Pro Tips

### Maximize Coverage with Minimal Effort
1. **Target pure utility functions first**
2. **Write comprehensive test cases** (boundary values, error cases)
3. **Use descriptive test names** for better debugging
4. **Group related tests** in describe blocks

### Mock Strategy (When It Works)
```typescript
// Simple, working pattern
const mockFunction = jest.fn()
jest.mock('module-name', () => ({
  functionName: mockFunction
}))
```

### When to Skip
- Module resolution errors
- Complex Next.js integrations
- Server Component dependencies
- Authentication flows requiring real auth state

---

**Last Updated**: Testing structure setup phase
**Next Review**: After Next.js + Jest compatibility improves

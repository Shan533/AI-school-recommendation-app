---
description: Testing patterns for Next.js 15 + Supabase
alwaysApply: false
---
# Testing Patterns for Next.js 15 + Supabase

## 🎯 Dual Testing Strategy (Recommended)

### ✅ **SOLUTION**: Use Jest + Vitest Together
**Jest**: Excellent for pure functions and schema validation
**Vitest**: Perfect for Server Components and API routes

## 🛠️ Tool Selection Guide

### Use Jest For:
- ✅ Pure utility functions (`validation.ts`, `utils.ts`)
- ✅ Schema validation and database migrations
- ✅ Simple component tests without Server Components
- ✅ Established patterns that work well

### Use Vitest For:
- ✅ Server Components (`helpers.ts`, `auth-actions.ts`)
- ✅ API route testing
- ✅ Next.js 15 modern features
- ✅ ESM modules with complex dependencies

## 📋 Testing Patterns

### Jest Pattern (Pure Functions)
```typescript
// Example: validation.test.ts
import { validateRange } from '@/lib/validation'

describe('validateRange', () => {
  it('should return null for valid values', () => {
    expect(validateRange(5, 1, 10, 'Test')).toBeNull()
  })
})
```

### Vitest Pattern (Server Components)
```typescript
// Example: helpers.vitest.ts
import { vi, describe, it, expect, beforeEach } from 'vitest'

// Mock modules with Vitest
vi.mock('@/lib/supabase/server', () => ({
  createClient: vi.fn()
}))

vi.mock('next/headers', () => ({
  cookies: vi.fn()
}))

// Import mocked modules
import { createClient } from '@/lib/supabase/server'
import { cookies } from 'next/headers'

// Create typed mocks
const mockCreateClient = vi.mocked(createClient)
const mockCookies = vi.mocked(cookies)

// Test implementation
describe('Server Component Function', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })
  
  it('should work with proper mocking', async () => {
    // Test logic here
  })
})
```

## 🔧 Configuration Setup

### Jest Configuration (jest.config.cjs)
```javascript
testPathIgnorePatterns: [
  '<rootDir>/__tests__/.*\\.skip\\.',    // Skip .skip.* files
  '<rootDir>/__tests__/.*\\.vitest\\.'  // Skip .vitest.* files
]
```

### Vitest Configuration (vitest.config.ts)
```typescript
export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: ['./test/setup.ts'],
    include: ['__tests__/**/*.{test,spec,vitest}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})
```

## 📊 Current Project Status

### Working Tests (116 total)
- **Jest**: 65 tests passing
  - ✅ `validation.ts` - 26 tests, 100% coverage
  - ✅ `utils.ts` - 4 tests, 100% coverage  
  - ✅ Schema validation - 35 tests
- **Vitest**: 51 tests passing
  - ✅ `helpers.ts` - 20 tests, 100% coverage
  - ✅ Basic components - 31 tests

### Migration Candidates
- `auth-actions.test.skip.ts` - Server Actions (can migrate to Vitest)
- `programs.test.skip.ts` - API routes (can migrate to Vitest)
- `schools.test.skip.ts` - API routes (can migrate to Vitest)

## 🚀 Usage Commands

### Jest (Pure Functions)
```bash
npm test                    # Run Jest tests
npm run test:watch          # Jest watch mode
npm run test:coverage       # Jest coverage
```

### Vitest (Server Components)
```bash
npm run test:vitest         # Run Vitest tests
npm run test:vitest:watch   # Vitest watch mode
npm run test:vitest:coverage # Vitest coverage
npm run test:vitest:ui      # Interactive UI
```

## 🎯 Testing Priorities

### High Priority (Use Vitest)
1. Server Components and authentication helpers ✅
2. API route handlers (next step)
3. Server Actions (next step)

### Medium Priority (Use Jest)
1. Pure utility functions ✅
2. Validation schemas ✅
3. Database schema tests ✅

### File Naming Convention
- **Jest**: `*.test.ts` - Pure functions, schemas
- **Vitest**: `*.vitest.ts` - Server Components, API routes
- **Skip**: `*.skip.ts` - Problematic tests to be migrated

## 💡 Migration Strategy

### When to Migrate to Vitest
1. Module resolution errors with Jest
2. Server Component imports
3. Next.js API route testing
4. Modern ESM module dependencies

### Migration Steps
1. Copy test from `.skip.ts` file
2. Replace Jest imports with Vitest
3. Update mocking from `jest.mock()` to `vi.mock()`
4. Use `vi.mocked()` for typed mocks
5. Rename file to `.vitest.ts`
6. Test and verify coverage

## 📈 Success Metrics

- **Coverage Improvement**: helpers.ts 0% → 100%
- **Test Count**: 65 → 116 total tests
- **Zero Conflicts**: Jest and Vitest run independently
- **Modern Stack**: Ready for Next.js 15 features

---

**Last Updated**: January 2025 - Vitest migration successful
**Status**: ✅ Dual testing strategy working perfectly
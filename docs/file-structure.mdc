---
alwaysApply: true
---

# Project File Structure

This document outlines the current file and directory structure for the AI School Recommend App.

```
AI_school_recommend_app/
├── docs/
│   ├── ai_prompt.md
│   ├── documentation-guidelines.mdc
│   ├── env.local.example
│   ├── file-structure.mdc
│   ├── QUICKSTART.md
│   ├── README.md
│   ├── setup-instructions.md
│   ├── design/
│   │   ├── README.md
│   │   ├── design-doc.mdc
│   │   ├── implementation-plan.mdc
│   │   ├── schema-design.mdc
│   │   └── search-system-design.md
│   └── testing/
│       ├── README.md
│       ├── testing-guide.md
│       ├── testing-plan.md
│       └── features/
│           ├── admin-crud-testing.md
│           ├── admin-reviews-testing.md
│           ├── ai-recommendations-testing.md
│           ├── collections-testing.md
│           ├── core-setup-testing.md
│           ├── csv-upload-testing.md
│           ├── public-pages-testing.md
│           └── user-reviews-testing.md
├── csv/
│   ├── programs-for-import.csv
│   ├── rotten-tomatoes.programs.csv
│   └── rotten-tomatoes.programs.updated.csv
├── __tests__/
│   ├── home.test.tsx
│   ├── run-schema-tests.sh
│   └── schema/
│       ├── schema-test-results.md
│       ├── schema-testing-guide.md
│       ├── test-schema-types.ts
│       ├── test-schema.sql
│       └── validate-migration.js
├── scripts/
│   └── prepare-programs-csv.mjs
├── docker/
│   ├── README.md
│   ├── docker-compose.yml
│   ├── Dockerfile
│   ├── Dockerfile.crawler
│   ├── Dockerfile.dev
│   ├── start-docker.bat
│   └── start-docker.sh
├── public/
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── src/
│   ├── app/
│   │   ├── (public)/
│   │   │   ├── login/
│   │   │   │   └── page.tsx
│   │   │   └── register/
│   │   │       └── page.tsx
│   │   ├── admin/
│   │   │   ├── csv-upload/
│   │   │   │   └── page.tsx
│   │   │   ├── dashboard/
│   │   │   │   └── page.tsx
│   │   │   ├── programs/
│   │   │   │   └── page.tsx
│   │   │   ├── reviews/
│   │   │   │   └── page.tsx
│   │   │   ├── schools/
│   │   │   │   └── page.tsx
│   │   │   └── users/
│   │   │       └── page.tsx
│   │   ├── api/
│   │   │   ├── admin/
│   │   │   │   ├── programs/
│   │   │   │   │   ├── [id]/
│   │   │   │   │   │   └── route.ts
│   │   │   │   │   └── route.ts
│   │   │   │   ├── reviews/
│   │   │   │   │   └── [id]/
│   │   │   │   │       └── route.ts
│   │   │   │   └── schools/
│   │   │   │       ├── [id]/
│   │   │   │       │   └── route.ts
│   │   │   │       └── route.ts
│   │   │   ├── auth/
│   │   │   │   └── logout/
│   │   │   │       └── route.ts
│   │   │   ├── debug/
│   │   │   │   └── programs/
│   │   │   │       └── [id]/
│   │   │   ├── reviews/
│   │   │   │   ├── program/
│   │   │   │   │   └── [id]/
│   │   │   │   │       └── route.ts
│   │   │   │   └── school/
│   │   │   │       └── [id]/
│   │   │   │           └── route.ts
│   │   │   └── test-put/
│   │   │       └── [id]/
│   │   ├── auth/
│   │   │   ├── auth-code-error/
│   │   │   │   └── page.tsx
│   │   │   ├── callback/
│   │   │   │   └── route.ts
│   │   │   ├── setup-username/
│   │   │   │   └── page.tsx
│   │   │   └── verify-email/
│   │   │       └── page.tsx
│   │   ├── check-config/
│   │   ├── profile/
│   │   │   └── page.tsx
│   │   ├── programs/
│   │   │   ├── [id]/
│   │   │   │   └── page.tsx
│   │   │   └── page.tsx
│   │   ├── schools/
│   │   │   ├── [id]/
│   │   │   │   └── page.tsx
│   │   │   └── page.tsx
│   │   ├── test-auth/
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components/
│   │   ├── admin/
│   │   │   ├── admin-search-card.tsx
│   │   │   ├── delete-review-button.tsx
│   │   │   ├── programs-management.tsx
│   │   │   └── schools-management.tsx
│   │   ├── navigation.tsx
│   │   ├── review-form.tsx
│   │   ├── reviews-list.tsx
│   │   └── ui/
│   │       ├── animated-requirement.tsx
│   │       ├── avatar.tsx
│   │       ├── badge.tsx
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── dialog.tsx
│   │       ├── form.tsx
│   │       ├── input.tsx
│   │       ├── label.tsx
│   │       ├── password-input.tsx
│   │       ├── password-requirements.tsx
│   │       ├── separator.tsx
│   │       ├── star-rating.tsx
│   │       ├── table.tsx
│   │       ├── textarea.tsx
│   │       └── username-requirements.tsx
│   ├── lib/
│   │   ├── admin-search.ts
│   │   ├── auth-actions.ts
│   │   ├── supabase/
│   │   │   ├── client.ts
│   │   │   ├── helpers.ts
│   │   │   └── server.ts
│   │   ├── utils.ts
│   │   └── validation.ts
│   └── middleware.ts
├── supabase/
│   └── migrations/
│       ├── 0000_init.sql
│       ├── 0001_update_programs_table.sql
│       ├── 0002_add_requirements_and_program_enhancements.sql
│       ├── 0003_update_reviews_for_half_stars_and_optional_comments.sql
│       └── 0004_admin_review_management.sql
├── components.json
├── eslint.config.mjs
├── jest.config.cjs
├── jest.setup.ts
├── next.config.ts
├── package-lock.json
├── package.json
├── postcss.config.mjs
├── README.md
└── tsconfig.json
```

## Directory Descriptions

### Core Directories

- **`docs/`**: Contains all project documentation, including design documents, implementation plans, technical architecture, and setup instructions.
  - **`testing/`**: Comprehensive testing documentation and guides for different features.

- **`csv/`**: Holds raw CSV data for schools and programs, as well as processed files for database import.

- **`__tests__/`**: Contains all test files organized by feature.
  - **`schema/`**: Database schema validation and migration tests.

- **`scripts/`**: Contains utility and migration scripts for data processing and other operational tasks.

- **`docker/`**: Docker configuration files for development and deployment containerization.

- **`public/`**: Stores static assets like images, fonts, and icons that are publicly accessible.

### Source Code Structure

- **`src/`**: The main application source code directory.
  - **`src/app/`**: Core of the Next.js application, using the App Router.
    - **`(public)/`**: Routes that are accessible without authentication (login, register).
    - **`admin/`**: Protected routes for the admin dashboard (CRUD operations, CSV upload, reviews management).
    - **`api/`**: API routes for server-side logic and data operations.
      - **`admin/`**: Admin-specific API endpoints for managing schools, programs, and reviews.
      - **`reviews/`**: Public review submission endpoints.
    - **`auth/`**: Authentication-related pages and callbacks.
    - **`programs/`**: Public program browsing and detail pages.
    - **`schools/`**: Public school browsing and detail pages.
    - **`profile/`**: User profile and management pages.

  - **`src/components/`**: Reusable React components.
    - **`admin/`**: Admin-specific components for data management and review moderation.
    - **`ui/`**: shadcn/ui components and custom UI elements.

  - **`src/lib/`**: Libraries, helpers, and utility functions.
    - **`admin-search.ts`**: Advanced search functionality with intelligent ranking.
    - **`supabase/`**: Supabase client and server configurations.
    - **`auth-actions.ts`**: Authentication server actions.
    - **`validation.ts`**: Zod validation schemas.

### Database & Configuration

- **`supabase/`**: Configuration and migration files for the Supabase database.
  - **`migrations/`**: SQL files that define the database schema versions, including RLS policies.

- **Root Configuration Files**: Jest configuration, Next.js config, TypeScript config, and other project setup files.

## Recent Updates

### Admin Review Management System
- Added `src/app/admin/reviews/page.tsx` - Admin interface for managing user reviews
- Added `src/api/admin/reviews/[id]/route.ts` - API endpoint for review deletion
- Added `src/components/admin/delete-review-button.tsx` - Client component for review deletion
- Added `supabase/migrations/0004_admin_review_management.sql` - RLS policies for admin review access

### Advanced Search System
- Added `src/lib/admin-search.ts` - Intelligent search with ranking algorithm
- Added `src/components/admin/admin-search-card.tsx` - Reusable search UI component
- Enhanced all admin pages with unified search functionality

### Database Schema Evolution
- `0003_update_reviews_for_half_stars_and_optional_comments.sql` - Enhanced review system
- `0004_admin_review_management.sql` - Admin permissions for review management

## Key Features Implemented

1. **Admin Dashboard**: Complete CRUD operations for schools, programs, and users
2. **Review Management**: Admin interface for moderating user reviews
3. **Advanced Search**: Intelligent search with exact match prioritization and abbreviation support
4. **CSV Upload**: Bulk data import functionality
5. **Authentication System**: Supabase-based auth with role-based access control
6. **Public Pages**: Browse schools and programs with review submission
7. **Responsive Design**: Mobile-first approach with Tailwind CSS
8. **Testing Infrastructure**: Jest with React Testing Library
9. **Docker Support**: Containerized development environment